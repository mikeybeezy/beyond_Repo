AWSTemplateFormatVersion: 2010-09-09
Parameters:
  InstanceType:
    Type: String
    Default: t2.micro
    Description: 'EC2 instance type, e.g. m1.small, m1.large, etc.'
    AllowedValues:
      - t1.micro
      - t2.micro
      - t2.small
      - t2.medium
      - m1.small
      - m1.large
      - m1.xlarge
      - m2.xlarge
      - m2.2xlarge
      - m2.4xlarge
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - c1.medium
      - c1.xlarge
      - c3.large
      - c3.xlarge
      - c3.2xlarge
      - c3.4xlarge
      - c3.8xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - g2.2xlarge
      - r3.large
      - r3.xlarge
      - r3.2xlarge
      - r3.4xlarge
      - r3.8xlarge
      - i2.xlarge
      - i2.2xlarge
      - i2.4xlarge
      - i2.8xlarge
      - d2.xlarge
      - d2.2xlarge
      - d2.4xlarge
      - d2.8xlarge
      - hi1.4xlarge
      - hs1.8xlarge
      - cr1.8xlarge
      - cc2.8xlarge
      - cg1.4xlarge
  WebServerPort:
    Type: String
    Default: '80'
    Description: "TCP/IP port of the web server"
  KeyName:
    Type: 'AWS::EC2::KeyPair::KeyName'
    Description: "Name of an existing EC2 KeyPair to enable SSH access to the web server"
  RoleName:
    Description: "Role to access the ec2 instance "
    Type: String
    Default: S3-wordpress-lab
    ConstraintDescription: "Must be a valid I am Role"
Resources:
  NodejsAPPVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.0.0.0/16
      InstanceTenancy: default
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'false'
      Tags:
        - Key: Name
          Value: Node-JS-VPC
  PeivateSubnetA:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: us-east-1b
      VpcId: !Ref NodejsAPPVPC
      Tags:
        - Key: Name
          Value: Public Subnet B 10.0.2.0/24
  PeivateSubnetB:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: us-east-1d
      VpcId: !Ref NodejsAPPVPC
      Tags:
        - Key: Name
          Value: Private Subnet B 10.0.4.0/24
  PublicSubnetA:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: us-east-1a
      VpcId: !Ref NodejsAPPVPC
      Tags:
        - Key: Name
          Value: Public Subnet A 10.0.1.0/24
  PrivateSubnetB:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: us-east-1c
      VpcId: !Ref NodejsAPPVPC
      Tags:
        - Key: Name
          Value: Private Subnet B 10.0.3.0/24
  IGW:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: Node-js -IGW
  doptb384c1d5:
    Type: 'AWS::EC2::DHCPOptions'
    Properties:
      DomainName: ec2.internal
      DomainNameServers:
        - AmazonProvidedDNS
  aclb68166ce:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref NodejsAPPVPC
  RouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref NodejsAPPVPC
  rtb2d434f55:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref NodejsAPPVPC
      Tags:
        - Key: Name
          Value: Node JS Route Table
  AppServer:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: t2.micro
      ImageId: ami-d15a75c7
      IamInstanceProfile: S3-wordpress-lab
      KeyName: !Ref KeyName
      VpcId: !Ref NodejsAPPVPC
      SecurityGroups: !Ref sgNodeJSSG
      UserData: 
         Fn::Base64: !Sub |  
                  
           #!/bin/bash -xe
           sudo apt-get update -qq
           sudo apt-get -y install curl
           mkdir -p /tmp/aws-cfn-bootstrap-latest
           curl https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-1.4-8.tar.gz | tar xz -C /tmp/aws-cfn-bootstrap-latest --strip-components 1â€¨        curl https://s3-ap-southeast-2.amazonaws.com/bucket/cfn-hup.service -o /etc/systemd/system/cfn-hup.service
           apt-get update
           apt-get install -y python-pip libssl-dev libffi-dev
           pip install pyopenssl ndg-httpsclient pyasn1
           pip install --upgrade /tmp/aws-cfn-bootstrap-latest
           cp /tmp/aws-cfn-bootstrap-latest/init/ubuntu/cfn-hup /etc/init.d/cfn-hup
           update-rc.d cfn-hup default
           chmod 755 /etc/init.d/cfn-hup
           service cfn-hup start        

           # Use the official docker install script
           wget -qO- https://get.docker.com/ | sh

           # Install docker-compose 1.8.0
           sudo sh -c "curl -L https://github.com/docker/compose/releases/download/1.8.0/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose"
           sudo chmod +x /usr/local/bin/docker-compose
           sudo sh -c "curl -L https://raw.githubusercontent.com/docker/compose/1.8.0/contrib/completion/bash/docker-compose > /etc/bash_completion.d/docker-compose"

           # Install docker-cleanup command
           cd /tmp
           rm -rf 76b450a0c986e576e98b
           git clone https://gist.github.com/76b450a0c986e576e98b.git
           cd 76b450a0c986e576e98b
           sudo mv docker-cleanup /usr/local/bin/docker-cleanup
           sudo chmod +x /usr/local/bin/docker-cleanup
        
        
        
  sgNodeJSSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
    GroupDescription: 'for the app nodes that allow ssh, http and docker ports'
      VpcId: !Ref NodejsAPPVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '2375'
          ToPort: '2375'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '2368'
          ToPort: '2368'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '3306'
          ToPort: '3306'
          CidrIp: 0.0.0.0/0
  s3beyondbucket2017:
    Type: 'AWS::S3::Bucket'
    Properties:
      AccessControl: PublicReadWrite
      VersioningConfiguration:
        Status: Enabled
  acl1:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: 'true'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '100'
      PortRange:
        From: '80'
        To: '80'
      NetworkAclId: !Ref aclb68166ce
  acl2:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: 'true'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '200'
      PortRange:
        From: '443'
        To: '443'
      NetworkAclId: !Ref aclb68166ce
  acl3:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: 'true'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '300'
      PortRange:
        From: '22'
        To: '22'
      NetworkAclId: !Ref aclb68166ce
  acl4:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: 'true'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '500'
      PortRange:
        From: '3306'
        To: '3306'
      NetworkAclId: !Ref aclb68166ce
  acl5:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: 'true'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '600'
      PortRange:
        From: '2368'
        To: '2368'
      NetworkAclId: !Ref aclb68166ce
  acl6:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      CidrBlock: 0.0.0.0/0
      Protocol: '-1'
      RuleAction: allow
      RuleNumber: '100'
      NetworkAclId: !Ref aclb68166ce
  subnetacl1:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      NetworkAclId: !Ref aclb68166ce
      SubnetId: !Ref PeivateSubnetA
  subnetacl2:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      NetworkAclId: !Ref aclb68166ce
      SubnetId: !Ref PublicSubnetA
  subnetacl3:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      NetworkAclId: !Ref aclb68166ce
      SubnetId: !Ref PrivateSubnetB
  subnetacl4:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      NetworkAclId: !Ref aclb68166ce
      SubnetId: !Ref PeivateSubnetB
  gw1:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref NodejsAPPVPC
      InternetGatewayId: !Ref IGW
  subnetroute2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref rtb2d434f55
      SubnetId: !Ref PublicSubnetA
  subnetroute3:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref rtb2d434f55
      SubnetId: !Ref PeivateSubnetA
  route1:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref rtb2d434f55
      GatewayId: !Ref IGW
    DependsOn: gw1
  dchpassoc1:
    Type: 'AWS::EC2::VPCDHCPOptionsAssociation'
    Properties:
      VpcId: !Ref NodejsAPPVPC
      DhcpOptionsId: !Ref doptb384c1d5
  ingress1:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref sgNodeJSSG
      IpProtocol: tcp
      FromPort: '80'
      ToPort: '80'
      CidrIp: 0.0.0.0/0
  ingress2:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref sgNodeJSSG
      IpProtocol: tcp
      FromPort: '8080'
      ToPort: '8080'
      CidrIp: 0.0.0.0/0
  ingress3:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref sgNodeJSSG
      IpProtocol: tcp
      FromPort: '2368'
      ToPort: '2368'
      CidrIp: 0.0.0.0/0
  ingress4:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref sgNodeJSSG
      IpProtocol: tcp
      FromPort: '22'
      ToPort: '22'
      CidrIp: 0.0.0.0/0
  ingress5:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref sgNodeJSSG
      IpProtocol: tcp
      FromPort: '3306'
      ToPort: '3306'
      CidrIp: 0.0.0.0/0
  ingress6:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref sgNodeJSSG
      IpProtocol: tcp
      FromPort: '443'
      ToPort: '443'
      CidrIp: 0.0.0.0/0
  egress1:
    Type: 'AWS::EC2::SecurityGroupEgress'
    Properties:
      GroupId: !Ref sgNodeJSSG
      IpProtocol: '-1'
      CidrIp: 0.0.0.0/0

