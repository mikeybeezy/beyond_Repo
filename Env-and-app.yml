AWSTemplateFormatVersion: 2010-09-09
Parameters:
  InstanceType:
    Type: "String"
    Default: "t2.micro"
    Description: "EC2 instance type, e.g. m1.small, m1.large, etc."
  
  WebServerPort:
    Type: "String"
    Default: "80"
    Description: "TCP/IP port of the web server"
  KeyName:
    Type: "AWS::EC2::KeyPair::KeyName"
    Description: "Name of an existing EC2 KeyPair to enable SSH access to the web server"
    
Resources:
  NodejsVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.0.0.0/16
      InstanceTenancy: default
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'false'
      Tags:
        - Key: Name
          Value: Node-JS-VPC
  
  PeivateSubnetA:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: us-east-1b
      VpcId: !Ref NodejsVPC
      Tags:
        - Key: Name
          Value: Public Subnet B 10.0.2.0/24
  
  PeivateSubnetB:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: us-east-1d
      VpcId: !Ref NodejsVPC
      Tags:
        - Key: Name
          Value: Private Subnet B 10.0.4.0/24

  PublicSubnetA:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: us-east-1a
      VpcId: !Ref NodejsVPC
      Tags:
        - Key: Name
          Value: Public Subnet A 10.0.1.0/24

  PrivateSubnetB:
    Type: 'AWS::EC2::Subnet'
    Properties:
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: us-east-1c
      VpcId: !Ref NodejsVPC
      Tags:
        - Key: Name
          Value: Private Subnet B 10.0.3.0/24
  IGW:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: Node-js -IGW

  doptb384c1d5:
    Type: 'AWS::EC2::DHCPOptions'
    Properties:
      DomainName: ec2.internal
      DomainNameServers:
        - AmazonProvidedDNS

  aclb68166ce:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref NodejsVPC

  RouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref NodejsVPC

  rtb2d434f55:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref NodejsVPC
      Tags:
        - Key: Name
          Value: Node JS Route Table

  AppServer:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: ami-bf8dd7c4
      UserData: !Base64 |
        #!/bin/bash
        sudo apt-get update -qq
        sudo apt-get -y install curl
        sudo mkdir /home/ubuntu/GhostFiles
        sudo mkdir /home/ubuntu/GhostDB
        sudo apt-get -y install python-pip
        sudo pip install docker-compose
        sudo apt install awscli -y        
        sudo apt-get install -y apt-transport-https ca-certificates
        sudo apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D
        sudo echo "deb https://apt.dockerproject.org/repo ubuntu-xenial main" | tee /etc/apt/sources.list.d/docker.list
        sudo apt-get update -qq
        sudo apt-get purge lxc-docker || true
        sudo apt-get -y install linux-image-extra-$(uname -r) linux-image-extra-virtual
        sudo apt-get -y install docker-engine 
        usermod -aG docker ubuntu
        sudo mkdir -p /etc/systemd/system/docker.service.d
        printf "[Service]\nExecStart=\nExecStart=/usr/bin/dockerd -H fd:// -H tcp://0.0.0.0:2375\n" >>  /etc/systemd/system/docker.service.d/docker.conf
        sudo curl -o /usr/local/bin/docker-compose -L "https://github.com/docker/compose/releases/download/1.11.2/docker-compose-$(uname -s)-$(uname -m)"
        sudo chmod +x /usr/local/bin/docker-compose
        sudo wget "https://s3.amazonaws.com/beyond-bucket-2017/docker-compose.yml"
        systemctl daemon-reload
        systemctl restart docker
        docker-compose up

  s3beyondbucket2017:
    Type: 'AWS::S3::Bucket'
    Properties:
      AccessControl: PublicReadWrite
      VersioningConfiguration:
        Status: Enabled

  sgNodeJSSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Node JS SG
      VpcId: !Ref NodejsVPC

  acl1:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: 'true'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '100'
      PortRange:
        From: '80'
        To: '80'
      NetworkAclId: !Ref aclb68166ce

  acl2:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: 'true'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '200'
      PortRange:
        From: '443'
        To: '443'
      NetworkAclId: !Ref aclb68166ce

  acl3:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: 'true'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '300'
      PortRange:
        From: '22'
        To: '22'
      NetworkAclId: !Ref aclb68166ce

  acl4:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: 'true'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '500'
      PortRange:
        From: '3306'
        To: '3306'
      NetworkAclId: !Ref aclb68166ce

  acl5:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      CidrBlock: 0.0.0.0/0
      Egress: 'true'
      Protocol: '6'
      RuleAction: allow
      RuleNumber: '600'
      PortRange:
        From: '2368'
        To: '2368'
      NetworkAclId: !Ref aclb68166ce
  acl6:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      CidrBlock: 0.0.0.0/0
      Protocol: '-1'
      RuleAction: allow
      RuleNumber: '100'
      NetworkAclId: !Ref aclb68166ce
  subnetacl1:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      NetworkAclId: !Ref aclb68166ce
      SubnetId: !Ref PeivateSubnetA
  subnetacl2:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      NetworkAclId: !Ref aclb68166ce
      SubnetId: !Ref PublicSubnetA
  subnetacl3:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      NetworkAclId: !Ref aclb68166ce
      SubnetId: !Ref PrivateSubnetB

  subnetacl4:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      NetworkAclId: !Ref aclb68166ce
      SubnetId: !Ref PeivateSubnetB
    
  gw1:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref NodejsVPC
      InternetGatewayId: !Ref IGW
    
  subnetroute2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref rtb2d434f55
      SubnetId: !Ref PublicSubnetA
  
  subnetroute3:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref rtb2d434f55
      SubnetId: !Ref PeivateSubnetA
    
  route1:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref rtb2d434f55
      GatewayId: !Ref IGW
    DependsOn: gw1
  
  dchpassoc1:
    Type: 'AWS::EC2::VPCDHCPOptionsAssociation'
    Properties:
      VpcId: !Ref NodejsVPC
      DhcpOptionsId: !Ref doptb384c1d5
  
  ingress1:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref sgNodeJSSG
      IpProtocol: tcp
      FromPort: '80'
      ToPort: '80'
      CidrIp: 0.0.0.0/0
  ingress2:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref sgNodeJSSG
      IpProtocol: tcp
      FromPort: '8080'
      ToPort: '8080'
      CidrIp: 0.0.0.0/0
  ingress3:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref sgNodeJSSG
      IpProtocol: tcp
      FromPort: '2368'
      ToPort: '2368'
      CidrIp: 0.0.0.0/0
  ingress4:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref sgNodeJSSG
      IpProtocol: tcp
      FromPort: '22'
      ToPort: '22'
      CidrIp: 0.0.0.0/0
  ingress5:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref sgNodeJSSG
      IpProtocol: tcp
      FromPort: '3306'
      ToPort: '3306'
      CidrIp: 0.0.0.0/0
  ingress6:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !Ref sgNodeJSSG
      IpProtocol: tcp
      FromPort: '443'
      ToPort: '443'
      CidrIp: 0.0.0.0/0
  egress1:
    Type: 'AWS::EC2::SecurityGroupEgress'
    Properties:
      GroupId: !Ref sgNodeJSSG
      IpProtocol: '-1'
      CidrIp: 0.0.0.0/0

